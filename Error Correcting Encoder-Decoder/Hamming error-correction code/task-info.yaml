type: edu
custom_name: stage5
files:
- name: src/correcter/Main.java
  visible: true
  text: |
    package correcter;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/CorrecterTest.java
  visible: false
  text: |+
    import correcter.Main;

    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.io.IOException;
    import java.util.ArrayList;
    import java.util.List;

    class TestClue {
        String input;
        String fileContent;

        TestClue(String input, String fileContent) {
            this.input = input;
            this.fileContent = fileContent;
        }
    }

    public class CorrecterTest extends StageTest<TestClue> {

        private static File received = null;
        private static File encoded = null;
        private static File decoded = null;

        public CorrecterTest() throws Exception {
            super(Main.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            TestClue[] testClues = new TestClue[]{
                new TestClue("encode", "Eat more of these french buns!"),
                new TestClue("send",   "Eat more of these french buns!"),
                new TestClue("decode", "Eat more of these french buns!"),

                new TestClue("encode", "$ome rand0m messAge"),
                new TestClue("send",   "$ome rand0m messAge"),
                new TestClue("decode", "$ome rand0m messAge"),

                new TestClue("encode", "better call Saul 555-00-73!"),
                new TestClue("send",   "better call Saul 555-00-73!"),
                new TestClue("decode", "better call Saul 555-00-73!"),

                new TestClue("encode", "5548172 6548 225147 23656595 5155"),
                new TestClue("send",   "5548172 6548 225147 23656595 5155"),
                new TestClue("decode", "5548172 6548 225147 23656595 5155"),
            };

            List<TestCase<TestClue>> result = new ArrayList<>();

            for (int i = 0; i < testClues.length; i++) {
                result.add(new TestCase<TestClue>()
                    .setAttach(testClues[i])
                    .setInput(testClues[i].input)
                    .addFile("send.txt", testClues[i].fileContent));
            }

            return result;
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String path = System.getProperty("user.dir");

            received = null;
            encoded = null;
            decoded = null;

            searchReceived();
            searchEncoded();
            searchDecoded();

            String correctFileBinary = toBinary(clue.fileContent.getBytes());
            String correctFileEncoded = encodeFile(correctFileBinary);

            String action = clue.input;

            if (action.equals("encode")) {

                if (encoded == null) {
                    return new CheckResult(false,
                        "Can't find encoded.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                byte[] encodedContent;
                FileInputStream encodedStream;

                try {
                    encodedStream = new FileInputStream(encoded);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    encodedContent = encodedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String encodedBinary = toBinary(encodedContent);

                return new CheckResult(encodedBinary.equals(correctFileEncoded));
            }

            if (action.equals("send")) {

                if (received == null) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it " +
                            "down or make sure the name of file is correct.");
                }

                byte[] receivedContent;

                FileInputStream receivedStream;

                try {
                    receivedStream = new FileInputStream(received);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    receivedContent = receivedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String receivedBinary = toBinary(receivedContent);


                return checkDifference(receivedBinary, correctFileEncoded);
            }



            if (action.equals("decode")) {

                if (decoded == null) {
                    return new CheckResult(false,
                        "Can't find decoded.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                byte[] decodedContent;


                FileInputStream decodedStream;

                try {
                    decodedStream = new FileInputStream(decoded);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    decodedContent = decodedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String decodedBinary = toBinary(decodedContent);

                if (!decodedBinary.equals(correctFileBinary)) {
                    return new CheckResult(false, "The decoded text must match initial text!");
                }

                return CheckResult.correct();
            }

            throw new RuntimeException("Can't check the program");
        }

        private static String toBinary(byte[] bytes) {
            StringBuilder sb = new StringBuilder(bytes.length * Byte.SIZE);
            for (int i = 0; i < Byte.SIZE * bytes.length; i++) {
                sb.append((bytes[i / Byte.SIZE] << i % Byte.SIZE & 0x80) == 0 ? '0' : '1');
            }
            return sb.toString();
        }

        private static byte[] fromBinary(String s) {
            int sLen = s.length();
            byte[] toReturn = new byte[(sLen + Byte.SIZE - 1) / Byte.SIZE];
            char c;
            for (int i = 0; i < sLen; i++)
                if ((c = s.charAt(i)) == '1')
                    toReturn[i / Byte.SIZE] = (byte) (toReturn[i / Byte.SIZE] | (0x80 >>> (i % Byte.SIZE)));
                else if (c != '0')
                    throw new IllegalArgumentException();
            return toReturn;
        }

        private static void searchReceived() {
            File file = new File("received.txt");
            if (file.exists()) {
                received = file;
            }
        }

        private static void searchEncoded() {
            File file = new File("encoded.txt");
            if (file.exists()) {
                encoded = file;
            }
        }

        private static void searchDecoded() {
            File file = new File("decoded.txt");
            if (file.exists()) {
                decoded = file;
            }
        }

        private String encodeFile(String binaryString) {

            String encoded = "";

            for (int i = 0; i < binaryString.length(); i += 4) {

                if (i + 4 > binaryString.length()) {
                    throw new RuntimeException("Can't decode binary data");
                }

                int startSubIndex = i;
                int stopSubIndex = i + 4;

                String currSub = binaryString.substring(startSubIndex, stopSubIndex);

                String encodedPart;

                int parityBit1 = 0;
                int parityBit2 = 0;
                int parityBit4 = 0;

                if (currSub.charAt(0) == '1') {
                    parityBit1++;
                    parityBit2++;
                }

                if (currSub.charAt(1) == '1') {
                    parityBit1++;
                    parityBit4++;
                }

                if (currSub.charAt(2) == '1') {
                    parityBit2++;
                    parityBit4++;
                }

                if (currSub.charAt(3) == '1') {
                    parityBit1++;
                    parityBit2++;
                    parityBit4++;
                }

                encodedPart =
                    (parityBit1 % 2 == 1? "1": "0") +
                    (parityBit2 % 2 == 1? "1": "0") +
                    currSub.charAt(0) +
                    (parityBit4 % 2 == 1? "1": "0") +
                    currSub.charAt(1) +
                    currSub.charAt(2) +
                    currSub.charAt(3) +
                    "0";

                encoded += encodedPart;
            }

            return encoded;
        }

        private CheckResult checkDifference(String output, String correct) {
            if (output.isEmpty() && correct.isEmpty()) return CheckResult.correct();

            if (output.length() != correct.length()) {
                return new CheckResult(false,
                    "The program was expected to output " +
                        correct.length() / 8 +
                        " bytes, but output " +
                        output.length() / 8);
            }

            for (int i = 0; i < output.length(); i += 8) {
                String currOutputByte = output.substring(i, i+8);
                String currCorrectByte = correct.substring(i, i+8);

                int difference = 0;
                for (int j = 0; j < currCorrectByte.length(); j++) {
                    char currOutputBit = currOutputByte.charAt(j);
                    char currCorrectBit = currCorrectByte.charAt(j);

                    if (currCorrectBit != currOutputBit) {
                        difference++;
                    }
                }

                if (difference == 0) {
                    return new CheckResult(false,
                        "One of bytes from the input stayed the same but should be changed");
                }

                if (difference != 1) {
                    return new CheckResult(false,
                        "One of bytes from the input was changes in more than one bit");
                }
            }

            return CheckResult.correct();
        }
    }

  learner_created: false
- name: decoded.txt
  visible: true
  text: 5548172 6548 225147 23656595 5155
  learner_created: true
- name: encoded.txt
  visible: true
  text: "\x0f�3<3���\x0f�\0<\0���\x0f��3\0\0��\x0f�3<3\0�\0\x0f\0\0<\x0f\0�3\x0f�\
    3<\0���\x0f��3\0\0�3\x0f��<<\0��\x0f��<3��\x0f\x0f�33\0\0��\x0f�3<3���"
  learner_created: true
- name: src/correcter/BitArray.java
  visible: true
  text: |
    package correcter;

    public class BitArray {

        private final byte[] data;

        public BitArray(byte[] data) {
            this.data = data;
        }

        public int getBit(int index) {
            int mask = 0x80 >>> index % 8;
            int dataByteIndex = index / 8;
            if (dataByteIndex > data.length - 1) {
                return 0;
            }
            int oneByte = data[dataByteIndex];
            if ((oneByte & mask) == 0) {
                return 0;
            }
            return 1;
        }
    }
  learner_created: true
- name: src/correcter/DataDecoder.java
  visible: true
  text: |
    package correcter;

    import java.util.Arrays;

    public class DataDecoder {

        public byte[] correct(byte[] receivedData) {
            MutableByte receivedByte = new MutableByte();
            byte[] corrected = Arrays.copyOf(receivedData, receivedData.length);
            MutableByte correctedByteVer1 = new MutableByte();
            MutableByte correctedByteVer2 = new MutableByte();

            for (int i = 0; i < corrected.length; i++) {
                receivedByte.setValue(receivedData[i]);

                if (receivedByte.getBit(6) != receivedByte.getBit(7)) {
                    continue;
                }

                correctedByteVer1.setValue(0b0);
                correctedByteVer2.setValue(0b0);
                for (int n = 0; n < 4; n++) {
                    int n0 = 2 * n;
                    int n1 = 2 * n + 1;
                    int b0 = receivedByte.getBit(n0);
                    int b1 = receivedByte.getBit(n1);
                    if (b0 == b1) {
                        correctedByteVer1.setBit(n0, b0);
                        correctedByteVer1.setBit(n1, b1);

                        correctedByteVer2.setBit(n0, b0);
                        correctedByteVer2.setBit(n1, b1);

                    } else {
                        correctedByteVer1.setBit(n0, 1);
                        correctedByteVer1.setBit(n1, 1);

                        correctedByteVer2.setBit(n0, 0);
                        correctedByteVer2.setBit(n1, 0);

                    }
                }
                if (correctedByteVer1.checkParity()) {
                    corrected[i] = correctedByteVer1.getValue();
                } else {
                    corrected[i] = correctedByteVer2.getValue();
                }
            }
            return corrected;
        }

        public byte[] decode(byte[] receivedData) {
            byte[] data = correct(receivedData);
            int arrLength = data.length * 3 / 8;
            if (data.length * 3 % 8 != 0) {
                arrLength += 1;
            }
            BitArray bitArray = new BitArray(data);
            byte[] decoded = new byte[arrLength];
            int decodedBitIndex = -1;
            MutableByte decodedByte = new MutableByte();
            for (int dataBitIndex = 0; dataBitIndex < data.length * 8 - 1; dataBitIndex += 2) {
                if ((dataBitIndex + 2) % 8 == 0) {
                    continue;
                }
                int dataBit = bitArray.getBit(dataBitIndex);
                decodedBitIndex++;
                int decodedByteIndex = decodedBitIndex / 8;
                int decodedBitIndexInByte = decodedBitIndex % 8;
                decodedByte.setValue(decoded[decodedByteIndex]);
                decodedByte.setBit(decodedBitIndexInByte, dataBit);
                decoded[decodedByteIndex] = decodedByte.getValue();
            }
            return decoded;
        }

        public byte[] remove(byte[] receivedData) {
            byte[] decoded = decode(receivedData);
            if (decoded[decoded.length - 1] == 0) {
                return Arrays.copyOf(decoded, decoded.length - 1);
            }
            return decoded;
        }
    }
  learner_created: true
- name: src/correcter/DataViewer.java
  visible: true
  text: |
    package correcter;

    public class DataViewer {

        public static String textView(byte[] data) {
            return new String(data);
        }

        public static String hexView(byte[] data) {
            StringBuilder hex = new StringBuilder(data.length * 2);
            for (byte b: data) {
                String hexString = Integer.toHexString(b & 0xFF);
                if (hexString.length() < 2) {
                    hex.append('0');
                }
                hex.append(hexString).append(" ");
            }
            return hex.toString();
        }

        public static String binView(byte[] data) {
            StringBuilder bin = new StringBuilder(data.length * 8);
            for (byte b: data) {
                String binaryString = padWithZero(Integer.toBinaryString(b & 0xFF));
                bin.append(binaryString).append(" ");
            }
            return bin.toString();
        }

        private static String padWithZero(String str) {
            return String.format("%1$8s", str).replace(' ', '0');
        }
    }
  learner_created: true
- name: received.txt
  visible: true
  text: "\v�\x13=\x13���Op\x10|\x10°�\n��2����/�#47\b�\x04\x0e\x02\b�\v@�\n�#, ��\
    C/��s\x02\x01�s\n��\x1c��͏L�4���\n/�;#\x10\x02��O³8#��"
  learner_created: true
- name: src/correcter/DataErrorGenerator.java
  visible: true
  text: |
    package correcter;

    import java.util.Arrays;
    import java.util.Random;

    public class DataErrorGenerator {

        private static final Random randomGen = new Random();

        public byte[] generate(byte[] original) {
            byte[] corrupted = Arrays.copyOf(original, original.length);
            for (int i = 0; i < corrupted.length; i++) {
                int toggleBit = 1 << randomGen.nextInt(8);
                corrupted[i] ^= toggleBit;
            }
            return corrupted;
        }
    }
  learner_created: true
- name: src/correcter/DataEncoder.java
  visible: true
  text: |
    package correcter;

    public class DataEncoder {

        public byte[] encode(byte[] data) {
            BitArray bitArray = new BitArray(data);
            int dataBitCount = data.length * 8;
            int encodedBytesCount = dataBitCount / 3;
            if (dataBitCount % 3 != 0) {
                encodedBytesCount += 1;
            }
            byte[] encoded = new byte[encodedBytesCount];
            for (int i = 0; i < encoded.length; i++) {
                int bit0 = bitArray.getBit(i * 3);
                int bit1 = bitArray.getBit(i * 3 + 1);
                int bit2 = bitArray.getBit(i * 3 + 2);
                int bb01 = doubleBit(bit0);
                int bb23 = doubleBit(bit1) >>> 2;
                int bb45 = doubleBit(bit2) >>> 4;
                int parity = doubleBit(bit0 ^ bit1 ^ bit2) >> 6;

                encoded[i] = (byte) (bb01 | bb23 | bb45 | parity);
            }
            return encoded;
        }

        private int doubleBit(int bit) {
            if (bit == 0) {
                return 0;
            }
            return 0b11000000;
        }


    }
  learner_created: true
- name: src/correcter/MutableByte.java
  visible: true
  text: |
    package correcter;

    public class MutableByte {

        private byte value;

        public byte getValue() {
            return value;
        }

        public void setValue(byte value) {
            this.value = value;
        }

        public void setValue(int value) {
            setValue((byte) value);
        }

        public int getBit(int index) {
            int bit = value & (0b10000000 >>> index);
            return bit == 0 ? 0 : 1;
        }

        public void setBit(int index, int bit) {
            value |= (bit << 7 - index);
        }

        public boolean checkParity() {
            int b0 = getBit(0);
            int b2 = getBit(2);
            int b4 = getBit(4);
            int parity = getBit(6);

            return (b0 ^ b2 ^ b4) == parity;
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/58/stages/316/implement#comment
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/58/stages/316/implement">JetBrains
    Academy</a>
  time: Sat, 14 Nov 2020 06:05:53 UTC
record: 5
